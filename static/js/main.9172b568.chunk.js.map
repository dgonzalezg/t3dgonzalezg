{"version":3,"sources":["stock.js","exchange.js","App.js","serviceWorker.js","index.js"],"names":["Stock","data","updates","buys","sells","tickers","map","update","ticker","useState","stock","setStock","parsedupdates","time","timestap","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","parseDate","percentalVar","values","filter","value","last","length","current","toFixed","getData","filterupdates","buyVolume","buy","volume","reduce","a","b","totalVolume","sell","high","Math","max","low","min","currentData","formatNumber","num","toString","replace","className","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","indexOf","key","onClick","Exchange","exchanges","stocks","exchange","listed_companies","company","name","company_name","getBuyVolume","sellVolume","getSellVolume","quantity","getParticipation","Object","keys","labels","extradata","parseFloat","barCharData","GoogleCharts","load","api","visualization","arrayToDataTable","PieChart","document","getElementById","draw","id","stackId","fill","ex","socket","io","path","connect","App","connected","setConnected","setUpdates","setBuys","setSells","setExchanges","setStocks","useEffect","on","emit","disconnect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9172b568.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {\n  LineChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Line,\n} from 'recharts'\nconst Stock = ({data}) => {\nconst { updates, buys, sells } = data;\nconst tickers = updates.map(update => update.ticker);\nconst [stock, setStock] = useState(tickers[0]);\n\nconst parseDate = (timestap) => {\n// sacado de https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\n  let unix_timestamp = timestap;\n// Create a new JavaScript Date object based on the timestamp\n// multiplied by 1000 so that the argument is in milliseconds, not seconds.\nvar date = new Date(unix_timestamp * 1000);\n// Hours part from the timestamp\nvar hours = date.getHours();\n// Minutes part from the timestamp\nvar minutes = \"0\" + date.getMinutes();\n// Seconds part from the timestamp\nvar seconds = \"0\" + date.getSeconds();\n\n// Will display time in 10:30:23 format\nvar formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\nreturn formattedTime;\n}\nconst parsedupdates = updates.map(update => {\n  if (typeof update.time === 'number') {\n    update.time = parseDate(update.time);\n  }\n  return update;\n})\nconst percentalVar = (stock) => {\n  const filterupdates = parsedupdates.filter(update => update.ticker === stock)\n  const values = filterupdates.map(update => update.value);\n  const last = values[values.length - 2];\n  const current = values[values.length - 1];\n  const val = ((last-current)/current)*100;\n  return (val.toFixed(2));\n}\n\nconst getData = (stock) => {\n  const filterupdates = parsedupdates.filter(update => update.ticker === stock);\n  const buyVolume = buys.filter(buy => buy.ticker === stock).map(buy => buy.volume).reduce((a, b) => a + b, 0);\n  const sellVolume = sells.filter(sell => sell.ticker === stock).map(sell => sell.volume).reduce((a, b) => a + b, 0);\n  const totalVolume = sellVolume + buyVolume;\n  const high = Math.max(...filterupdates.map(update => update.value));\n  const low = Math.min(...filterupdates.map(update => update.value));\n  const last = filterupdates.map(update => update.value)[filterupdates.length - 1];\n  return {filterupdates, totalVolume, high, low, last};\n}\nconst currentData = getData(stock);\n\nfunction formatNumber(num) {\n  // sacada de https://blog.abelotech.com/posts/number-currency-formatting-javascript/\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1.')\n}\n\n\n  return (\n    <div className=\"stock container box tile is-child is-fluid\">\n      <div className=\"stock__graph tile is-vertical\">\n      <div className=\"stock__graph graph container\">\n        <p className=\"title\">Valor v/s Tiempo</p>\n      <LineChart width={730} height={250} data={currentData.filterupdates}\n  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n  <CartesianGrid strokeDasharray=\"3 3\" />\n  <XAxis dataKey=\"time\" />\n  <YAxis />\n  <Tooltip />\n  <Legend />\n  <Line type=\"monotone\" dataKey=\"value\" stroke=\"#40E0D0\" />\n</LineChart>\n      </div>\n      </div>\n      <div className=\"stock__info tile is-vertical\">\n        <table className=\"table is-hoverable\">\n          <thead>\n            <tr>\n              <th className=\"has-text-centered\">Stock</th>\n              <th className=\"has-text-centered\">Volumen Total Transado</th>\n              <th className=\"has-text-centered\">Alto Histórico</th>\n              <th className=\"has-text-centered\">Bajo Histórico</th>\n              <th className=\"has-text-centered\">Último Precio</th>\n              <th className=\"has-text-centered\">Variación Pocentual</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tickers.filter((a, b) => tickers.indexOf(a) === b).map(ticker => {\n              const data = getData(ticker);\n              if (stock === ticker){\n                return (\n                  <tr key={ticker} onClick={()=>setStock(ticker)} className=\"is-selected\">\n                    <td className=\"has-text-centered\">{ticker}</td>\n                    <td className=\"has-text-centered\">{formatNumber(data.totalVolume)} USD</td>\n                    <td className=\"has-text-centered\">{data.high} USD</td>\n                    <td className=\"has-text-centered\">{data.low} USD</td>\n                    <td className=\"has-text-centered\">{data.last} USD</td>\n                    <td className=\"has-text-centered\">{percentalVar(ticker)}</td>\n                  </tr>\n                );\n              }\n              else {\n                return (\n                  <tr key={ticker} onClick={()=>setStock(ticker)}>\n                    <td className=\"has-text-centered\">{ticker}</td>\n                    <td className=\"has-text-centered\">{formatNumber(data.totalVolume)} USD</td>\n                    <td className=\"has-text-centered\">{data.high} USD</td>\n                    <td className=\"has-text-centered\">{data.low} USD</td>\n                    <td className=\"has-text-centered\">{data.last} USD</td>\n                    <td className=\"has-text-centered\">{percentalVar(ticker)}</td>\n                  </tr>\n                );\n              }\n              \n            })}\n          </tbody>\n        </table>\n        <p>Haz click sobre un stock para ver la evolución de su precio en el tiempo.</p>\n      </div>\n    </div>\n  );\n  \n}\n\nexport default Stock;","import React from 'react';\nimport {GoogleCharts} from 'google-charts';\nimport {BarChart, XAxis, CartesianGrid, YAxis, Tooltip, Legend, Bar} from 'recharts';\n\n\nconst Exchange = ({data}) => {\nconst { exchanges, stocks, buys, sells } = data;\n\n\n\nconst getTicker = (name) => {\n  const ticker = stocks.filter(stock => stock.company_name === name);\n  return ticker[0].ticker;\n}\n\nconst getBuyVolume = (ticker) => {\n  return buys.filter(buy => buy.ticker === ticker).map(buy => buy.volume).reduce((a, b) => a + b, 0);\n}\n\nconst getSellVolume = (ticker) => {\n  return sells.filter(sell => sell.ticker === ticker).map(sell => sell.volume).reduce((a, b) => a + b, 0);\n}\n\nconst getData = (exchange) => {\n  const key = exchange;\n  const tickers = exchanges[key].listed_companies.map(company => getTicker(company));\n  const buyVolume = tickers.map(ticker => getBuyVolume(ticker)).reduce((a, b) => a + b, 0);\n  const sellVolume = tickers.map(ticker => getSellVolume(ticker)).reduce((a, b) => a + b, 0);\n  const totalVolume = buyVolume + sellVolume;\n  const quantity = tickers.length;\n  return {buyVolume, sellVolume, totalVolume, quantity};\n}\n\n\nconst getParticipation = (exchange) => {\n  const currentVol = getData(exchange).totalVolume;\n  const sumVolume = Object.keys(exchanges).map(exchange => getData(exchange).totalVolume).reduce((a, b) => a + b, 0);\n  const participation = (currentVol/sumVolume)*100;\n  return (participation.toFixed(2));\n}\nconst labels = [['Exchange', 'Paticipation']]\nconst extradata = Object.keys(exchanges).map(exchange => {\n  return [exchange, parseFloat(getParticipation(exchange))]\n});\n\nconst barCharData = Object.keys(exchanges).map(exchange => {\n  const data = getData(exchange);\n  return {name: exchange, 'Volumen Compra': data.buyVolume, 'Volumen Venta': data.sellVolume};\n});\n\nconst drawChart = () => {\n //console.log([...pieData,...extradata])\n  // Standard google charts functionality is available as GoogleCharts.api after load\n  const data = GoogleCharts.api.visualization.arrayToDataTable([...labels,...extradata]);\n  const pie_1_chart = new GoogleCharts.api.visualization.PieChart(document.getElementById('piechart'));\n  var options = {'width':650,\n                  'height':300};\n  pie_1_chart.draw(data, options);\n\n}\nGoogleCharts.load(drawChart);\n\nfunction formatNumber(num) {\n  // sacada de https://blog.abelotech.com/posts/number-currency-formatting-javascript/\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1.')\n}\nreturn (\n    <div className=\" exchange container tile is-child box is-fluid\">\n      <div className=\"exchange__graph tile is-vertical\">\n    <div className=\"exchange__graph piechart container\">\n    <p className=\"title\">Participación de Mercado</p>\n    <div id=\"piechart\" className=\"container\"></div>\n    </div>\n      </div>\n    <div className=\"exchange__info tile is-vertical container\">\n      <p className=\"title\">Volumenes de Compra</p>\n    <BarChart width={500} height={300} data={barCharData}\n            margin={{top: 20, right: 30, left: 20, bottom: 5}}>\n       <CartesianGrid strokeDasharray=\"3 3\"/>\n       <XAxis dataKey=\"name\"/>\n       <YAxis/>\n       <Tooltip/>\n       <Legend />\n       <Bar dataKey=\"Volumen Compra\" stackId=\"a\" fill=\"#8884d8\" />\n       <Bar dataKey=\"Volumen Venta\" stackId=\"a\" fill=\"#82ca9d\" />\n      </BarChart>\n  \n    </div>\n    <div className=\"tile\">\n    <table className=\"table is-striped\">\n        <thead>\n          <tr>\n            <th>Exchange</th>\n            <th>Volumen Compra</th>\n            <th>Volumen Venta</th>\n            <th>Volumen Total</th>\n            <th>Cantidad Acciones</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(exchanges).map(ex => {\n            const data = getData(ex);\n            \n              return (\n                <tr key={ex}>\n                  <td className=\"has-text-centered\">{ex}</td>\n                  <td className=\"has-text-centered\">{formatNumber(data.buyVolume)} USD</td>\n                  <td className=\"has-text-centered\">{formatNumber(data.sellVolume)} USD</td>\n                  <td className=\"has-text-centered\">{formatNumber(data.totalVolume)} USD</td>\n                  <td className=\"has-text-centered\">{data.quantity}</td>\n                </tr>\n              );\n          \n          })}\n        </tbody>\n      </table>\n    </div>\n    \n    </div>\n\n\n);\n}\n\nexport default Exchange;","import React, {useState, useEffect} from 'react';\nimport 'bulma';\nimport './App.css';\nimport io from 'socket.io-client';\nimport Stock from './stock'\nimport Exchange from './exchange';\nimport './index.scss'\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\nsocket.connect();\nfunction App() {\n  const [connected,setConnected] = useState(true)\n  const [updates, setUpdates] = useState([]);\n  const [buys, setBuys] = useState([]);\n  const [sells, setSells] = useState([]);\n  const [exchanges, setExchanges] = useState({});\n  const [stocks, setStocks] = useState([]);\n\n  const handleClick = () => {\n    if (socket.connected) {\n      socket.disconnect();\n      setConnected(socket.connected)\n    }\n    else {\n      socket.connect();\n      setConnected(true)\n    }\n    \n  }\n  \n  useEffect(() => {\n    socket.on('UPDATE', update => {\n      setUpdates(currentData => [...currentData, update]);\n    });\n    socket.on('BUY', buy => {\n      setBuys(currentData => [...currentData, buy]);\n    });\n    socket.on('SELL', sell => {\n      setSells(currentData => [...currentData, sell]);\n    });\n    socket.emit('EXCHANGES');\n    socket.on('EXCHANGES', exchanges => {\n      setExchanges(exchanges);\n    })\n    socket.emit('STOCKS');\n    socket.on('STOCKS', stocks => {\n      setStocks(stocks);\n    })\n  },[]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"main container is-fluid tile is-ancestor\">\n        <div className=\"tile container is-fluid is-parent is-vertical\">\n          <p className=\"title\">Stocks</p>\n        {updates.length > 0 ? <Stock data={{updates, buys, sells}}></Stock>:null}\n        <p className=\"title\">Exchanges</p>\n        {Object.keys(exchanges).length > 0 && stocks.length ? <Exchange data={{ exchanges, stocks, buys, sells}}></Exchange> : null}\n        </div>\n      \n      </div>\n      <footer className=\"footer\">\n        <div className=\"container\">\n          <p>Estado de Conexión: {connected ? 'Conectado':'Desconectado'}</p>\n          <button className=\"header__button button\" onClick={handleClick}>{connected ? 'Desconectar':'Conectar'}</button>\n        </div>\n    \n    \n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}